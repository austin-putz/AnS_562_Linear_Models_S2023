---
title: "Introduction to R"
subtitle: "Intro to Modeling"
author: "Juan Steibel and Austin Putz"
date: "Jan 18, 2023"
self-contained: true
format:
  html:
    theme: cosmo 
    toc: true
    number-depth: 3
    html-math-method: katex
    code-fold: false
---

<!-- Set CSS for Style in HTML Markdowns -->

```{css, echo=FALSE}
h1, h2, h3, h4 {
  color: #194A8D;
  text-align: center;
}
p {
  color: grey;
  font-size: 20px;
}
ul, ol {
  color: grey;
  font-size: 20px;
}
```

<!-- Set Knitr Options -->

```{r}
#| label: knitr_setup
#| warning: false
#| echo: false

# set options for knitr (engine that will render everything)
knitr::opts_chunk$set(cache      = TRUE,
                      echo       = TRUE,
                      warning    = TRUE,
                      error      = TRUE,
                      fig.height = 6,
                      fig.width  = 8,
                      dpi        = 180
                      )
```

<!-- Setup Code -->

```{r}
#| label: setup_code 
#| warning: false 
#| echo: true

# remove all objects if restarting script
rm(list=ls())

# garbage collection (clean memory/RAM)
gc()

# print session info (all versions)
sessionInfo()

#==============================================================================#
# Setup Options
#==============================================================================#

# set tibble width for printing
options(tibble.width = Inf)

# remove scientific notation
options(scipen=999)

#==============================================================================#
# Packages
#==============================================================================#

# load library
#library(JuliaCall)
library(GGally)
library(datasets) 
library(plotly)
library(ggthemes)
library(lubridate)
library(tidyverse)

#==============================================================================#
# Set paths
#==============================================================================#

# set all paths
path_main    <- "~/Documents/ISU/Classes/AnS_562/2023/Part_A/R/"
path_data    <- paste0(path_main, "Data/")
path_plots   <- paste0(path_main, "Plots/")
path_output  <- paste0(path_main, "Output/")
path_results <- paste0(path_main, "Results/")
path_scripts <- paste0(path_main, "Scripts/")

# set working directory
setwd(path_main)

```









<br>

## Dataset

```{r}
#| label: dataset 
#| warning: false 
#| echo: true

# pull data from datasets package
data ("longley")

# library(arrow)
# # write out arrow file
# write_feather(
#   x = longley,
#   sink = "longley.arrow")

# print help on longley dataset
?longley

# print dimensions (number of rows x number of columns)
dim(longley)

# print first rows of dataset
head(longley)

# print correlation of all variables
pairs(longley, main = "Scatter plot with all variables")

# plot all correlations
ggpairs(longley, progress=FALSE) # from GGally package

# plot Employed on GNP from langley dataset
longley %>%
ggplot(., aes(x=GNP,y=Employed)) + 
  geom_point() +    # points for scatter
  geom_smooth(method = "lm") # plot smooth linear model line to plot

```








<br>
<br>
<br>

## Model

We will be fitting the following

\begin{equation}
\boldsymbol{y} = \boldsymbol{Xb} + \boldsymbol{e}
\end{equation}

where $y$ is the response variable (Employed column), $X$ is an incidence
matrix (will cover later), $b$ is a vector of coefficients we are solving
for (intercept and slope), and finally $e$ is the residual (not predicted from
the model). 

```{r}
#| label: first_model 
#| warning: false 
#| echo: true

# Fit a very simple linear model:
# y = intercept + slope*GNP + e
srm <- lm(Employed ~ GNP, data=longley)

# print summary of model
summary(srm)

# what is under the hood:
names(srm)

# get a more in depth view of this 'object'
str(srm)

```




```{r}
#| label: residuals_y_hat 
#| warning: false 
#| echo: true

# Obtain Residuals:
# e = y - (intercept_hat + x*beta_hat)
# add residuals to original dataset 
longley$e_hat <- residuals(srm)

# Obtain Predicted Values (y_hat):
# (intercept_hat + x*beta_hat)
longley$y_hat <- predict(srm)

# print first lines of dataset
head(longley)


```





<br>

### Diagnostics

```{r}
#| label: diagnostics 
#| warning: false 
#| echo: true

# three commonly used diagnostic plots

# residual on Employed
ggplot(longley,aes(x=Employed, y=e_hat)) + 
  geom_point() + 
  geom_smooth(method = "lm")

# residual on y_hat
ggplot(longley, aes(x=y_hat, y=e_hat)) + 
  geom_point() + 
  geom_smooth(method = "lm")

# residual on Year
ggplot(longley, aes(x=Year, y=e_hat)) + 
  geom_point() + 
  geom_smooth(method = "lm")

# running plot on the model will produce 6 diagnostic plots you should check
par(mfrow=c(2,3))
plot(srm, which=1:6)
par(mfrow=c(1,1))

```


```{r}
#| label: hist_diagnostic_plots 
#| warning: false 
#| echo: true

# histogram of residuals
longley %>%
ggplot(., aes(x=e_hat)) +
  geom_histogram(fill="dodgerblue3", color="white", binwidth=0.25) +
  geom_vline(xintercept = 0, linetype=2, color="red") +
  labs(
    title = "Histogram of Residuals",
    subtitle = "y = Xb + e Model",
    x = "Residual from Model",
    y = "Count",
    caption = "Longley dataset"
  )

# histogram of y_hat
longley %>%
ggplot(., aes(x=y_hat)) +
  geom_histogram(fill="dodgerblue3", color="white", binwidth=2) +
  labs(
    title = "Histogram of Y hat Values",
    subtitle = "y = Xb + e Model",
    x = "Y hat Values from Model",
    y = "Count",
    caption = "Longley dataset"
  )

# density of y_hat
longley %>%
  select(Employed, y_hat) %>%
  gather() %>%
ggplot(., aes(x=value, fill=key)) +
  geom_density(color="white", alpha=0.2) +
  scale_fill_discrete("Column", labels = c("y = Employed", "Y hat")) +
  labs(
    title = "Histogram of Observed and Y hat Values",
    subtitle = "y = Xb + e Model",
    x = "Y hat Values from Model",
    y = "Count",
    caption = "Longley dataset"
  )

```







<br>
<br>
<br>

## Simulation

<br>

### Basic Simulation

This simulation will assumed the model coefficients are fixed. 

```{r}
#| label: simulation 
#| warning: false 
#| echo: true

#------------------------------------------------------------------------------#
# simulation to check the model
#------------------------------------------------------------------------------#

# extract linear coefficients from model (intercept and slope term)
coefs <- srm$coefficients

# extract residual sd. note it's not directly available
sigma_e <- summary(srm)$sigma 

# predict each value given the model
y_hat <- coefs[1] + (coefs[2]*longley$GNP)

# print y_hat values
y_hat

# add y_hat to dataset
longley$y_hat

# Simulate residuals nrep times given model estimate of sigma_e (residual variance)
nrep <- 100
e_m  <- replicate(n=nrep, rnorm(nrow(longley), mean = 0, sd = sigma_e))
dim(e_m)

# generate new predicted values given residual samples
p_m <- y_hat + e_m
#p_m

# boxplot - predicted on GNP
boxplot(p_m ~ longley$GNP)

# boxplot - predicted on GNP
boxplot(p_m ~ longley$GNP, at=longley$GNP)
abline(coefs)
points(longley$GNP, longley$Employed, pch=19, col="red")

```


<br>

### Advanced Simulation

This simulation will not assumed the coefficients from the model are fixed. 
The following will generate new estimates of the coefficients given the 
variance of the estimates. 

```{r}
#| label: simulation_advanced
#| warning: false 
#| echo: true

# Simulate multiple regression lines (?)
# this is a more advanced topic for which we need matrix algebra and some 
# OLS and model fitting results. We will come back to this in 2 weeks. 

# (co)variance matrix of model coefficients
vcv <- vcov(srm)

# print vcv matrix
print(vcv)

# sqrt diagonals to get SE of coefficients
vcov(srm) %>%
  diag() %>%
  sqrt()

# set number of reps to simulate
nrep <- 1000

# choleski decomposition of variance-covariance
L <- (chol(vcv))

# simulate new coefficients from the model (not fixed anymore)

# create 1000 x 2 matrix of standard normal samples
n01 <- matrix(rnorm(2*nrep), nrep, 2)

# dim of n01
dim(n01)

# multiply this matrix by chol decomposed vcv matrix
beta_sim <- n01 %*% L # %*% is matrix multiplication

# add coefficients to this
beta_sim[,1] <- beta_sim[,1] + coefs[1] # add intercept estimate
beta_sim[,2] <- beta_sim[,2] + coefs[2] # add slope estimate
head(beta_sim)

# check covariance
cov(beta_sim)

# should be the same as vcv
vcv

# print column means of simulated coefficients (should be close to the model estimates)
colMeans(beta_sim)

# plot regression lines + average line + observed points
plot(longley$GNP,longley$Employed, type="none",
     main = "Employed on GNP", xlab = "GNP", ylab = "Employed")
abline(coefs, lwd=2, col="red")
apply(beta_sim, 1, function(x) abline(x,col="gray"))
abline(coefs, lwd=2, col="red")
points(longley$GNP, longley$Employed, pch=19)

```
















